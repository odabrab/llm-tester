//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  GEMINI RESPONSE VIEW LIBRARY
////////
////////  File name:         GeminiResponseView.js.
////////  Author:            Marcio Barbado, Jr.
////////  Contact:           <marcio.barbado@bdslabs.com.br>.
////////  Place:             S&atilde;o Paulo, Brasil. 
////////  Copyright (c):     2024.
////////  License:           General Public License, version 2.
////////
////////  App's name:        LLM Tester.
////////  App's description: .
////////
////////  This program is free software; you can redistribute it
////////  and/or modify it under the terms of the GNU General Public
////////  License as published by the Free Software Foundation;
////////  either version 2 of the License, or (at your option) any
////////  later version.
////////  
////////  This program is distributed in the hope that it will be
////////  useful, but WITHOUT ANY WARRANTY; without even the implied
////////  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
////////  PURPOSE. See the GNU General Public License for more
////////  details.
////////  
////////  You should have received a copy of the GNU General Public
////////  License along with this program; if not, write to the Free
////////  Software Foundation, Inc., 59 Temple Place, Suite 330,
////////  Boston, MA 02111-1307 USA
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  ESTRUTURA DO CONTEÚDO DESTE FICHEIRO
////////
////////  Representa-se abaixo a estrutura deste ficheiro. O sufixo
////////  (CC) denota um trecho com comentários e código, e o sufixo
////////  (CO) denota um trecho com comentários apenas. Pense nisto
////////  como um sumário.
////////
////////  (CO) UTILIZAÇÃO
////////    (CO) BIBLIOTECAS
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) UTILIZAÇÃO
////////
////////  A presente seção é como um manual.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) BIBLIOTECAS
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

import { useKeepAwake } from 'expo-keep-awake';

import * as Network from 'expo-network';

import { useState } from 'react';

import { ScrollView, Text, TouchableOpacity, View } from 'react-native';

import { Card } from 'react-native-paper';

import { GoogleGenerativeAI } from '@google/generative-ai';

import { useRoute } from '@react-navigation/native';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) BIBLIOTECA(S) LOCAL(IS)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

import Library from './Library.js';

import styles from './Styles.js';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) FUNÇÃO(ÕES)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO FILETOGENERATIVEPART()
////////
////////  Converter informações do sistema de arquivos local em um
////////  objeto GoogleGenerativeAI.Part.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function fileToGenerativePart(path, mimeType) {

  'use server';

  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString('base64'),
      mimeType,
    },
  };
} //  Fim da função fileToGenerativePart().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  FUNÇÃO GEMINIRESPONSEVIEW()
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function GeminiResponseView({ navigation }){

  'use server';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIÁVEL DE ESTADO SVA_RESPONSE
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const [sva_response, fun_setResponse] = useState(null);

  useKeepAwake();

  return (
    <View style={styles.containerViewOutter}>
      <ScrollView>
        <Card style={styles.crdJobsView}>
          <Card.Content>
            <View style={styles.containerRow}>
              <Text style={styles.paragraph01}>
                RESPOSTA{"\n"}
                {Run()}
              </Text>

              <TouchableOpacity
                onPress={() => navigation.navigate("RegisterView")}
                style={styles.btnTouchable00}
              >

                <Text style = {styles.btnLabel}>
                  Analisar
                </Text>

              </TouchableOpacity>

            </View>

          </Card.Content>

        </Card>
      </ScrollView>
    </View>
  );
} //  Fim da função GeminiResponseView().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO RUN()
////////
////////  Função a ser executada no lado do servidor para atenuar
////////  problemas CORS.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
async function Run(var_par_str_prompt){

  'use server';

  const con_route        = useRoute();

  const con_prompt       = con_route.params?.var_prompt;

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT GENAI
////////
////////  Declarar e inicializar a constante genAI com a classe
////////  GoogleGenerativeAI.
////////
////////  A constante genAI usa a chave da API para armazenar uma
////////  estrutura de dados.
////////
////////  A referida estrutura de dados corresponde a um objeto da
////////  classe GoogleGenerativeAI.
//////////////////////////////////////////////////////////////////////
  const genAI            = new GoogleGenerativeAI(process.env.EXPO_PUBLIC_API_KEY_GEMINI_0002);

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT MODEL
////////
////////  Declarar e inicializar a constante model com uma versão de
////////  modelo generativo.
////////
////////  Exemplos de alguns modelos generativos do Google:
////////
////////  * gemini-1.5-flash;
////////    modelo dito multimodal que recebe áudio, imagem,
////////    audiovisual e texto, e devolve texto;
////////
////////  * gemini-1.5-pro
////////    ; e
////////
////////  * gemini-pro-vision
////////    .
//////////////////////////////////////////////////////////////////////
  const model          = genAI.getGenerativeModel(

                               {
                                 model: 'gemini-1.5-flash'
                               }
                             );

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CON_OBJ_PROMISERESULT
////////
////////  A constante con_obj_promiseResult é um objeto da classe
////////  Promise.
//////////////////////////////////////////////////////////////////////
  const con_obj_promiseResult  = await model.generateContent(con_prompt)

    .then(

    )
    .catch(

    );

  const response     = await con_obj_promiseResult.response;
  const con_str_text = response.text();

  return con_str_text;
} //  Fim da função run().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARAÇÃO(ÕES) E INICIALIZAÇÃO(ÕES)
////////
////////  Declarações e inicializações de constantes e variáveis.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARAÇÃO(ÕES) E INICIALIZAÇÃO(ÕES) RESTRITA(S)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CORPO
////////
////////  .
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

export default GeminiResponseView;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) ENDING
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
