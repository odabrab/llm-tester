//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  REACT NATIVE'S MAIN GENERIC LIBRARY
////////
////////  File name:         Library.js.
////////  Author:            Marcio Barbado, Jr.
////////  Contact:           <marcio.barbado@bdslabs.com.br>.
////////  Place:             S&atilde;o Paulo, Brasil.
////////  Copyright (c):     2024, and 2025.
////////  License:           General Public License, version 2.
////////
////////  App's name:        llm-tester.
////////  App's description: A prototype to test whether LLM outputs
////////                     comply with Brazilian laws.
////////
////////  This program is free software; you can redistribute it
////////  and/or modify it under the terms of the GNU General Public
////////  License as published by the Free Software Foundation;
////////  either version 2 of the License, or (at your option) any
////////  later version.
////////  
////////  This program is distributed in the hope that it will be
////////  useful, but WITHOUT ANY WARRANTY; without even the implied
////////  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
////////  PURPOSE. See the GNU General Public License for more
////////  details.
////////  
////////  You should have received a copy of the GNU General Public
////////  License along with this program; if not, write to the Free
////////  Software Foundation, Inc., 59 Temple Place, Suite 330,
////////  Boston, MA 02111-1307 USA
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  STRUCTURE OF THIS FILE'S CONTENT
////////
////////  Representa-se abaixo a estrutura deste ficheiro. O sufixo
////////  (CC) denota um trecho com comentários e código, e o sufixo
////////  (CO) denota um trecho com comentários apenas. Pense nisto
////////  como um sumário.
////////
////////  (CO) USAGE
////////    (CC) LIBRARY(IES)
////////    (CO) FUNCTION(S)
////////      (CC) FUNCTION LIBRARY()
////////        (CC) FUNCTION FUNBOOCREATE()
////////        (CC) FUNCTION FUNBOOREAD()
////////        (CC) FUNCTION FUNBOOUPDATE()
////////        (CC) FUNCTION FUNBOOUPDATEFIREBASE()
////////        (CC) FUNCTION FUNBOODELETE()
////////        (CC) FUNCTION FUNSTRREADFILE()
////////        (CO) DECLARATION(S) AND INITIALIZATION(S)
////////          (CC) CONSTANT CONFIREBASECONFIG
////////          (CC) CONSTANT CONOBJCACHE
////////          (CC) CONSTANT CONSTRJOBREMOTEURL
////////          (CC) CONSTANT CONSTRPLATFORM
////////          (CC) CONSTANT CONSTRPROJECTNAMETAG
////////          (CC) VARIABLE VARBOOGENERICRETURN
////////          (CC) VARIABLE VARBOOISLOCAL
////////          (CC) VARIABLE VARINTINODETYPE
////////          (CC) VARIABLE VARSTRINODE
////////          (CC) VARIABLE VARSTRINODENAME
////////          (CO) DECLARATION(S) AND INITIALIZATION(S),
////////               CONSTRAINED
////////            (CC) VARIABLE VARDATA
////////            (CC) VARIABLE VARVIEWGENERICELEMENT
////////          (CC) DECLARATION(S) AND INITIALIZATION(S), FIREBASE
////////            (CC) CONSTANT CONDATABASE
////////            (CC) CONSTANT CONSTORAGE
////////    (CC) BODY
////////      (CC) ENDING
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) USAGE
////////
////////  A presente seção é como um manual de uso da biblioteca
////////  Library.js, que deve ser importada em todo ficheiro
////////  de código-fonte a realizar operações CRUD de persistência.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) LIBRARY(IES)
////////
////////  Apresenta-se a seguir bibliotecas que eventualmente sejam
////////  necessárias para que esta biblioteca funcione.
////////
////////  Caso inexista conteúdo a seguir, não remova este bloco de
////////  comentário. Ele pode lhe ser útil no momento em que alguma
////////  biblioteca precisar ser incluída.
////////
////////  O módulo expo-document-picker.
////////  O módulo expo-file-system fornece FileSystem para operações
////////  CRUD locais.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

import * as DocumentPicker from 'expo-document-picker';

//  Firebase.
import firebase from 'firebase';

//  A biblioteca SafeAreaView é uma opção a View. Ambas estão em
//  react-native.
import { AsyncStorage, Platform } from 'react-native';

import { Cache } from 'react-native-cache';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) FUNCTION(S)
////////
////////  Funções de persistência oferecidas pela biblioteca
////////  Library.js.
////////
////////  A linguagem de programação JavaScript oferece algumas
////////  opções para se trabalhar com arquivos, ficheiros e
////////  diretórios.
////////
////////  A classe Blob é apropriada para se trabalhar com arquivos
////////  binários em contextos quaisquer desde que os referidos
////////  binários não precisem ser editados.
////////
////////  A classe File é apropriada para se trabalhar com arquivos,
////////  ficheiros e diretórios em páginas Web.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION LIBRARY()
////////
////////  Function Library() is the main routine of this library. All
////////  other functions, constants and variables are declared on
////////  Library()'s scope.
////////
////////  It is declared as async because some of its inner functions
////////  need network.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
async function Library(){

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNBOOCREATE()
////////
////////  Creates a local or remote archive, directory, file and/or
////////  inode.
////////
////////  PARAMETERS
////////
////////  @param {String} varParStrPlatform
////////
////////  @param inodeData
////////
////////  @param {Boolean} varParBooInodeLocal
////////    variável booleana que determina se o inode é local.
////////
////////  @param inodeName
////////
////////  @param {Integer} varParIntInodeType
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  function funBooCreate(inodeData, inodeName, varParBooInodeLocal, varParIntInodeType, varParStrPlatform){

    varBooIsLocal  = varParBooInodeLocal;
    varStrPlatform = varParStrPlatform;

    switch(varStrPlatform){

      case "Android":

        console.log(conStrProjectNameTag + " Sistema Operacional Android.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o local.");
        }

        else{

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o remota.");
        }

        break;

      case "iOS":
        console.log(conStrProjectNameTag + " Sistema Operacional iOS.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o local.");
        }

        else{

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o remota.");
        }

        break;

      case "Web":
        console.log(conStrProjectNameTag + " Web.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o local.");

          localStorage.setItem("oItem", "valorDoItem");
        }

        else{

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o remota.");
        }

        break;
      
      default:

        console.log(conStrProjectNameTag + " Plataforma desconhecida.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o local.");
        }

        else{

          console.log(conStrProjectNameTag + " Cria&ccedil;&atilde;o remota.");
        }
    } // Structure switch()'s end.

    return varBooGenericReturn;
  } //  Function funBooCreate()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNBOOREAD()
////////
////////  Reads a local or remote inode. If the file is remote, then
////////  it behaves as a download.
////////
////////  PARÂMETROS
////////
////////  @param {String} varParStrPlatform
////////
////////  @param inodeData
////////
////////  @param {Boolean} booInodeLocal
////////
////////  @param inodeName
////////
////////  @param inodeType
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  function funBooRead(inodeData, inodeName, varParBooInodeLocal, varParIntInodeType, varParStrPlatform){
  
    varBooIsLocal  = varParBooInodeLocal;
    varStrPlatform = varParStrPlatform;

    switch(varStrPlatform){

      case "Android":

        console.log(conStrProjectNameTag + " Sistema Operacional Android.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Leitura local.");
        }

        else{

          console.log(conStrProjectNameTag + " Leitura remota.");
        }

        break;

      case "iOS":
        console.log(conStrProjectNameTag + " Sistema Operacional iOS.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Leitura local.");
        }

        else{

          console.log(conStrProjectNameTag + " Leitura remota.");
        }

        break;

      case "Web":
        console.log(conStrProjectNameTag + " Web.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Leitura local.");

          localStorage.getItem("oItem");
        }

        else{

          console.log(conStrProjectNameTag + " Leitura remota.");
        }

        break;
      
      default:
        console.log(conStrProjectNameTag + " Plataforma desconhecida.");

        if (varBooIsLocal){

          console.log(conStrProjectNameTag + " Leitura local.");
        }

        else{

          console.log(conStrProjectNameTag + " Leitura remota.");
        }
    } //  Structure switch()'s end.

    return varBooGenericReturn;
  } //  Function funBooRead()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNBOOUPDATE()
////////
////////  Atualiza um inode local ou remoto, e.g., escrever em um
////////  ficheiro de texto local ou remoto.
////////
////////  Caso o inode de interesse esteja localizado remotamente, há
////////  algumas possibilidades de se realizar a atualização.
////////
////////  Uma das possibilidades de se atualizar um inode remoto é:
////////
////////  i)  download de cópia, e criação de um inode local
////////      temporário;
////////
////////  ii) edição do inode local temporário; e por fim
////////
////////  iii) upload do inode temporário local.
////////
////////  PARÂMETROS
////////
////////  @param {String} varParStrPlatform
////////
////////  @param inodeData
////////
////////  @param {Boolean} booInodeLocal
////////
////////  @param inodeName
////////
////////  @param inodeType
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  function funBooUpdate(varParStrPlatform, inodeData, booInodeLocal, strInodeName, inodeType){
    
    const con_update = async() => {

      try {

        if (registro.timestamp == '' || registro.timestamp == undefined){

          throw conStrProjectNameTag + 'Valor de timestamp inválido.';
        }

        if (registro.consulta == '' || registro.consulta == undefined){

          throw conStrProjectNameTag + 'Valor de consulta inválido.';
        }

        navigation.navigate('InitialView');
      } //  Fim do try.

      catch(error){

        alert(conStrProjectNameTag + error);

        console.log(conStrProjectNameTag + error);
      }
    };

    //  Boolean variable varBooReturn is local, and it is
    //  initialized with variable varBooGenericReturn's value,
    //  which is global.
    var varBooReturn = varBooGenericReturn;

    //  Variável global, já declarada.
    varData          = inodeData;

    //  Variável global, já declarada.
    varBooIsLocal    = booInodeLocal;

    //  Variável global, já declarada.
    varStrInodeName  = strInodeName;

    //  Variável global, já declarada.
    varIntInodeType  = inodeType;

    if (varBooIsLocal){

      console.log(conStrProjectNameTag + " Atualiza&ccedil;&atilde;o local.");
      varViewGenericElement = document.createElement("varViewGenericElement");
    }

    else{

      console.log(conStrProjectNameTag + " Atualiza&ccedil;&atilde;o remota.");
      varInode = new Blob(varData, {type: varIntInodeType});
    }

    return varBooReturn;
  } //  Function funBooUpdate()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNBOOUPDATEFIREBASE()
////////
////////  Atualiza um banco de dados do serviço Firebase.
////////
////////  PARÂMETROS
////////
////////  @param {String} varParStrPlatform
////////
////////  @param inodeData
////////
////////  @param {Boolean} booInodeLocal
////////
////////  @param inodeName
////////
////////  @param inodeType
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  function funBooUpdateFirebase(varParStrPlatform, inodeData, booInodeLocal, strInodeName, inodeType){
    
    const con_update = async() => {

      try {

        if (registro.timestamp == '' || registro.timestamp == undefined){

          throw conStrProjectNameTag + 'Valor de timestamp inválido.';
        }

        if (registro.consulta == '' || registro.consulta == undefined){

          throw conStrProjectNameTag + 'Valor de consulta inválido.';
        }

        await database
          .ref('llm-tester-poc/' + registro.timestamp)
          .set(registro)
          .then(

            (snapshot) => {

              console.log('Registro atualizado com sucesso.' + snapshot.key);
            } //  Fim da função anônima.
          ) //  Fim do ".then".
          .catch(

            (error) => {

              console.log(error);
            } //  Fim da função anônima.
          );  //  Fim do ".catch", que também é o fim da instrução iniciada por "await database".
        
        navigation.navigate('InitialView');
      } //  Fim do try.

      catch(error){

        alert(conStrProjectNameTag + error);

        console.log(conStrProjectNameTag + error);
      }
    };

    varData          = inodeData;
    varBooIsLocal    = booInodeLocal;
    varStrInodeName  = strInodeName;
    varIntInodeType     = inodeType;

    if (varBooIsLocal){

      console.log(conStrProjectNameTag + " Atualiza&ccedil;&atilde;o local.");
      varViewGenericElement = document.createElement("varViewGenericElement");
    }

    else{

      console.log(conStrProjectNameTag + " Atualiza&ccedil;&atilde;o remota.");
      varInode = new Blob(varData, {type: varIntInodeType});
    }

    return varBooGenericReturn;
  } //  Function funBooUpdateFirebase()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNBOODELETE()
////////
////////  Remove um inode local ou remoto.
////////
////////  PARÂMETROS
////////
////////  @param {String} varParStrPlatform
////////
////////  @param inodeData
////////
////////  @param {Boolean} booInodeLocal
////////
////////  @param inodeName
////////
////////  @param inodeType
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  function funBooDelete(varParStrPlatform, inodeData, booInodeLocal, inodeName, inodeType){

    varBooIsLocal = booInodeLocal;

    if (varBooIsLocal){

      console.log(conStrProjectNameTag + " Remo&ccedil;&atilde;o local.");
    }

    else{

      console.log(conStrProjectNameTag + " Remo&ccedil;&atilde;o remota.");
    }

    return varBooGenericReturn;
  } //  Function funBooDelete()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNCTION FUNSTRREADFILE()
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  async function funStrReadFile(){

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CON_PICKEDDOCUMENT
////////
////////  Declarar e inicializar a constante con_pickedDocument com um
////////  documento a conter a chave da API.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
    const con_pickedDocument = await DocumentPicker.pickSingle(

                                 {
                                   type: [DocumentPicker.types.allFiles],
                                 }
                               );
    
    var var_str_return       = '';
    
    return var_str_return;
  } // Function funStrReadFile()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARATION(S) AND INITIALIZATION(S)
////////
////////  Declarações e inicializações de constantes e variáveis.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONFIREBASECONFIG
////////
////////  A constante firebaseConfig armazena as configurações
////////  necessárias para que seja possível acessar e usar o serviço
////////  Firebase.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const conFirebaseConfig = {
                              apiKey:            process.env.EXPO_PUBLIC_API_KEY_FIREBASE_0000,
                              authDomain:        "llm-tester-firebase-database.firebaseapp.com",
                              projectId:         "llm-tester-firebase-database",
                              storageBucket:     "llm-tester-firebase-database.firebasestorage.app",
                              messagingSenderId: "178695178915",
                              appId:             "1:178695178915:web:4997614616d06692d8cd16",
                            };

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONOBJCACHE
////////
////////  A constante cache é declarada e inicializada como uma
////////  instância de Cache.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const conObjCache       = new Cache({
                                         namespace: "App",
                                         policy:    {
                                                       maxEntries: 50000,
                                                       stdTTL:     0
                                                    },
                                         backend:   AsyncStorage
                                     });

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONSTRJOBREMOTEURL
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const conStrJobRemoteURL      = "https://";

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONSTRPLATFORM
////////
////////  The conStrPlatform constant is a string holding the current
////////  platform, i.e., android, ios, macos, web or windows.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const conStrPlatform          = Platform.OS;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONSTRPROJECTNAMETAG
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const conStrProjectNameTag    = "[LLM TESTER]";

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARBOOGENERICRETURN
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  var varBooGenericReturn       = true;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARBOOISLOCAL
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  var varBooIsLocal             = true;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARINTINODETYPE
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  var varIntInodeType           = 0;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARSTRINODE
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  var varStrInode               = "";

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARSTRINODENAME
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  var varStrInodeName           = "";

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARATION AND INITIALIZATION, CONSTRAINED
////////
////////  For REST purposes on the job-related online spreadsheet.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARDATA
////////
//////////////////////////////////////////////////////////////////////
  var varData                   = null;

//////////////////////////////////////////////////////////////////////
////////  (CC) VARIABLE VARVIEWGENERICELEMENT
////////
//////////////////////////////////////////////////////////////////////
  var varViewGenericElement     = null;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) DECLARATION(S) AND INITIALIZATION(S), FIREBASE
////////
////////  .
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  if(!firebase.apps.length){

    firebase.initializeApp(firebaseConfig);
  }

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONDATABASE
////////
////////  Firebase database.
//////////////////////////////////////////////////////////////////////
  const conDatabase             = firebase.database();

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CONSTORAGE
////////
////////  Firebase storage.
//////////////////////////////////////////////////////////////////////
  const conStorage              = firebase.storage();
} //  Function Library()'s end.

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) BODY
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

export default Library();

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) ENDING
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
