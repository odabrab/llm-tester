//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  BIBLIOTECA DA TELA DE ANÁLISE
////////
////////  File name:         AnaliseView.js.
////////  Author:            Marcio Barbado, Jr.
////////  Contact:           <marcio.barbado@bdslabs.com.br>.
////////  Place:             S&atilde;o Paulo, Brasil. 
////////  Copyright (c):     2024.
////////  License:           General Public License, version 2.
////////
////////  App's name:        .
////////  App's description: .
////////
////////  This program is free software; you can redistribute it
////////  and/or modify it under the terms of the GNU General Public
////////  License as published by the Free Software Foundation;
////////  either version 2 of the License, or (at your option) any
////////  later version.
////////  
////////  This program is distributed in the hope that it will be
////////  useful, but WITHOUT ANY WARRANTY; without even the implied
////////  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
////////  PURPOSE. See the GNU General Public License for more
////////  details.
////////  
////////  You should have received a copy of the GNU General Public
////////  License along with this program; if not, write to the Free
////////  Software Foundation, Inc., 59 Temple Place, Suite 330,
////////  Boston, MA 02111-1307 USA
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) BIBLIOTECAS
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

import * as Network from 'expo-network';

import { useState } from 'react';

import { ScrollView, Text, TouchableOpacity, View } from 'react-native';

import { Card } from 'react-native-paper';

import { GoogleGenerativeAI } from '@google/generative-ai';

import { useRoute } from '@react-navigation/native';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) BIBLIOTECA(S) LOCAL(IS)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

import Library from './Library.js';

import styles from './Styles.js';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) FUNÇÃO(ÕES)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO FILETOGENERATIVEPART()
////////
////////  Converter informações do sistema de arquivos local em um
////////  objeto GoogleGenerativeAI.Part.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function fileToGenerativePart(path, mimeType) {

  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString('base64'),
      mimeType,
    },
  };
} //  Fim da função fileToGenerativePart().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO FUN_BOO_ENVIARPROMPT()
////////
////////  A função fun_boo_enviarPrompt() cumpre uma função de
////////  comunicação.em rede, e por isso é declarada com async.
////////  Consequentemente, pode usufruir de await.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
async function FunHook_boo_enviarPrompt(){

  const con_route        = useRoute();

  const con_prompt       = con_route.params?.var_prompt;

  const llmAnswer        = await run(con_prompt);
  
  var var_boo_sendReturn = true;
  
  gva_str_response       = llmAnswer;

  return var_boo_sendReturn;
} //  Fim da função fun_boo_enviarPrompt().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO FUN_BOO_RECEBER()
////////
////////  .
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
async function fun_boo_receber(){

  var var_boo_return = true;

  return var_boo_return;
} //  Fim da função fun_boo_receber().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  FUNÇÃO RESPONSEVIEW()
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function AnaliseView({ navigation }) {

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIÁVEL DE ESTADO SVA_ANALISE
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const [sva_analise, fun_setAnalise]   = useState(null);

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIÁVEL DE ESTADO SVA_RESPONSE
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
  const [sva_response, fun_setResponse] = useState(null);

  return (
    <View style={styles.containerViewOutter}>
      <ScrollView>

        {fun_setResponse(gva_str_response) && (

                                                <Card style={styles.crdJobsView}>

                                                  <Card.Content>

                                                    <View style={styles.containerRow}>

                                                      <Text style={styles.paragraph01}>
                                                        RESPOSTA{"\n"}
                                                        {sva_response}
                                                      </Text>

                                                      <TouchableOpacity
                                                         onPress={() => navigation.navigate("RegisterView")}
                                                         style={styles.btnTouchable00}
                                                      >
                                                         <Text style = {styles.btnLabel}>
                                                           Analisar
                                                         </Text>
                                                      </TouchableOpacity>

                                                    </View>

                                                  </Card.Content>

                                                </Card>
                                              )
        }







        
      </ScrollView>

      {fun_setAnalise(sva_response) && (

        <View>
          <Text>
            AN&Aacute;LISE
          </Text>
          <Text>
            {sva_analise}
          </Text>
        </View>
      )}
    </View>
  );
} //  Fim da função ResponseView().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) FUNÇÃO RUN()
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
async function run(var_par_str_prompt){

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT GENAI
////////
////////  Declarar e inicializar a constante genAI com a classe
////////  GoogleGenerativeAI.
////////
////////  A constante genAI usa a chave da API para armazenar uma
////////  estrutura de dados.
////////
////////  A referida estrutura de dados corresponde a um objeto da
////////  classe GoogleGenerativeAI.
//////////////////////////////////////////////////////////////////////
// const genAI            = new GoogleGenerativeAI('AsuaAPIkeyNAOdeveSERdeixadaAQUI');
const genAI            = new GoogleGenerativeAI('AIzaSyDXC7wnxTqRtyewCvmWB6G3guGpzK6G4Ms');

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT MODEL
////////
////////  Declarar e inicializar a constante model com uma versão de
////////  modelo generativo.
////////
////////  Exemplos de alguns modelos generativos do Google:
////////
////////  * gemini-1.5-flash;
////////    modelo dito multimodal que recebe áudio, imagem,
////////    audiovisual e texto, e devolve texto;
////////
////////  * gemini-1.5-pro
////////    ; e
////////
////////  * gemini-pro-vision
////////    .
//////////////////////////////////////////////////////////////////////
  const model          = genAI.getGenerativeModel(

                               {
                                 model: 'gemini-1.5-flash'
                               }
                             );

  const con_str_prompt = var_par_str_prompt;

//////////////////////////////////////////////////////////////////////
////////  (CC) CONSTANT CON_OBJ_PROMISERESULT
////////
////////  A constante con_obj_promiseResult é um objeto da classe
////////  Promise.
//////////////////////////////////////////////////////////////////////
const con_obj_promiseResult  = await model.generateContent(con_str_prompt)

  .then(

  )
  .catch(

  );

  const response     = await con_obj_promiseResult.response;
  const con_str_text = response.text();

  return con_str_text;
} //  Fim da função run().

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARAÇÃO(ÕES) E INICIALIZAÇÃO(ÕES)
////////
////////  Declarações e inicializações de constantes e variáveis.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) VARIÁVEL GVA_STR_RESPONSE
////////
////////  Global variable.
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
var gva_str_response         = '';

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CO) DECLARAÇÃO(ÕES) E INICIALIZAÇÃO(ÕES) RESTRITA(S)
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) CORPO
////////
////////  .
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

export default AnaliseView;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////  (CC) ENDING
////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
